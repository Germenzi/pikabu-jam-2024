[gd_scene load_steps=16 format=3 uid="uid://cu1opk84g5j3u"]

[ext_resource type="Texture2D" uid="uid://ds317wjep3rlx" path="res://assets/shovel-attack.png" id="1_qon1v"]
[ext_resource type="Texture2D" uid="uid://dfe0re316871a" path="res://assets/shovel-idle.png" id="1_uynmc"]
[ext_resource type="Texture2D" uid="uid://cnx3nt5whsnmi" path="res://assets/shovel-walk.png" id="3_78hep"]

[sub_resource type="GDScript" id="GDScript_38a08"]
resource_name = "main"
script/source = "extends CharacterBody2D

@export var hunt_distance : float = 150.0
@export var running_speed : float = 50.0
@export var chilling_walk_time_sec : float = 0.5
@export var chilling_stay_time_sec : float = 0.5
@export var attack_distance : float = 40.0
@export var attack_damage : float = 30.0
@export var max_health : float = 70.0
@export_range(0.0, 1.0) var cookie_drop_rate : float = 0.5
@export_range(0.0, 1.0) var cake_drop_rate : float = 0.25

@export var cookie_container : Node
@export var bullets_container : Node

enum State {
	NONE,
	IDLE,
	FOLLOWING_PLAYER,
	ATTACKING_PLAYER,
}


var _state : State = State.NONE
var _attack_ready : bool = true

var _target_player : Node2D = null
var _health : float = max_health

# chilling state data
var _chilling_time : float
var _is_chilling_walk : bool = false


func take_damage(damage:int) -> void:
	_health -= damage
	if _health <= 0.0:
		_state = State.NONE
		
		var dropvalue : float = randf()
		if dropvalue <= cake_drop_rate:
			var cake : Node2D = preload(ScenesNamespace.CAKE_FILEPATH).instantiate()
			cake.global_position = global_position
			cookie_container.add_child.call_deferred(cake)
			print(\"Cake dropped\")
		elif dropvalue <= cookie_drop_rate:
			var cookie : Node2D = preload(ScenesNamespace.COOKIE_FILEPATH).instantiate()
			cookie.global_position = global_position
			cookie_container.add_child.call_deferred(cookie)
			print(\"Cookie dropped\")
		
		queue_free()


func _ready() -> void:
	_state_idle()


func _process(delta: float) -> void:
	%HealthLabel.text = \"Health: %.1f\" % _health
	
	if _state == State.IDLE:
		_process_idle(delta)
	elif _state == State.FOLLOWING_PLAYER:
		_process_following_player(delta)


func _physics_process(delta: float) -> void:
	move_and_slide()


func _process_idle(delta:float) -> void:
	# неэффективно
	var possible_targets : Array[Node] = get_tree().get_nodes_in_group(GroupsNamespace.PLAYER)\\
		.filter(func(x:Node): return x is Node2D)
	
	var nearest : Node2D = null
	for i:Node2D in possible_targets:
		if nearest == null or global_position.distance_to(i.global_position) < global_position.distance_to(nearest.global_position):
			nearest = i
	
	if nearest == null or global_position.distance_to(nearest.global_position) > hunt_distance:
		%StateLabel.text = \"chilling\"
		_chilling_time += delta
		
		if _is_chilling_walk:
			if _chilling_time >= chilling_walk_time_sec:
				_chilling_time = 0.0
				_is_chilling_walk = false
				velocity = Vector2.ZERO
				%AnimatedSprite.play(\"idle\")
		else:
			if _chilling_time >= chilling_stay_time_sec:
				_chilling_time = 0.0
				_is_chilling_walk = true
				velocity = Vector2.RIGHT.rotated(2*PI*randf())*running_speed
				%AnimatedSprite.play(\"walk\")
				if sign(%AnimatedSprite.scale.x) != sign(velocity.x) and abs(velocity.x) >= 0.001:
					%AnimatedSprite.scale = Vector2(%AnimatedSprite.scale.x*-1, %AnimatedSprite.scale.y)
	else:
		_state_following_player(nearest)



func _process_following_player(delta:float) -> void:
	if global_position.distance_to(_target_player.global_position) > hunt_distance:
		_state_idle()
	
	if abs(global_position.x - _target_player.global_position.x) < attack_distance:
		%AnimatedSprite.scale.x = abs(%AnimatedSprite.scale.x)*sign(_target_player.global_position.x - global_position.x)
		if abs(global_position.y - _target_player.global_position.y) >= 5.0:
			velocity = Vector2(-sign(_target_player.global_position.x - global_position.x), sign(_target_player.global_position.y - global_position.y)).normalized()*running_speed
		elif _attack_ready:
			# я написал просто ужасную вещь...
			if _target_player._state == _target_player.State.MOVING:
				_state_attacking_player(_target_player)
		else:
			velocity = Vector2.ZERO
	else:
		var dir : Vector2 = global_position.direction_to(_target_player.global_position)
		velocity = dir * running_speed
	
		if sign(%AnimatedSprite.scale.x) != sign(velocity.x) and abs(velocity.x) >= 0.001:
			%AnimatedSprite.scale = Vector2(%AnimatedSprite.scale.x*-1, %AnimatedSprite.scale.y)


func _state_idle() -> void:
	%AnimatedSprite.play(\"idle\")
	velocity = Vector2.ZERO
	_state = State.IDLE


func _state_attacking_player(player:Node2D) -> void:
	%AnimatedSprite.play(\"attack\")
	_state = State.ATTACKING_PLAYER
	velocity = Vector2.ZERO
	%StateLabel.text = \"attacking player\"
	await get_tree().create_timer(0.5).timeout
	
	if global_position.distance_to(player.global_position) < attack_distance:
		player.take_damage(attack_damage)
		print(\"player attacked\")
	
	_attack_ready = false
	%AttackCooldownTimer.start()
	
	_state_idle()


func _state_following_player(player:Node2D) -> void:
	%AnimatedSprite.play(\"walk\")
	_state = State.FOLLOWING_PLAYER
	_target_player = player
	%StateLabel.text = \"following player\"


func _on_attack_cooldown_timer_timeout() -> void:
	_attack_ready = true


#func _draw() -> void:
	#draw_circle(Vector2.ZERO, hunt_distance, Color.RED, false)
	#draw_circle(Vector2.ZERO, attack_distance, Color.GREEN, false)
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_2kqfu"]
size = Vector2(29, 72)

[sub_resource type="AtlasTexture" id="AtlasTexture_rxgnu"]
atlas = ExtResource("1_qon1v")
region = Rect2(0, 0, 237, 386)

[sub_resource type="AtlasTexture" id="AtlasTexture_6emsb"]
atlas = ExtResource("1_qon1v")
region = Rect2(237, 0, 237, 386)

[sub_resource type="AtlasTexture" id="AtlasTexture_lqrxq"]
atlas = ExtResource("1_qon1v")
region = Rect2(474, 0, 237, 386)

[sub_resource type="AtlasTexture" id="AtlasTexture_mi216"]
atlas = ExtResource("1_uynmc")
region = Rect2(0, 0, 237, 386)

[sub_resource type="AtlasTexture" id="AtlasTexture_l127c"]
atlas = ExtResource("1_uynmc")
region = Rect2(237, 0, 237, 386)

[sub_resource type="AtlasTexture" id="AtlasTexture_nbx2l"]
atlas = ExtResource("1_uynmc")
region = Rect2(474, 0, 237, 386)

[sub_resource type="AtlasTexture" id="AtlasTexture_rufsa"]
atlas = ExtResource("1_uynmc")
region = Rect2(711, 0, 237, 386)

[sub_resource type="AtlasTexture" id="AtlasTexture_6webt"]
atlas = ExtResource("3_78hep")
region = Rect2(0, 0, 237, 386)

[sub_resource type="AtlasTexture" id="AtlasTexture_6v4sc"]
atlas = ExtResource("3_78hep")
region = Rect2(237, 0, 237, 386)

[sub_resource type="SpriteFrames" id="SpriteFrames_x41un"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_rxgnu")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_6emsb")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_lqrxq")
}],
"loop": true,
"name": &"attack",
"speed": 6.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_mi216")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_l127c")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_nbx2l")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_rufsa")
}],
"loop": true,
"name": &"idle",
"speed": 3.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_6webt")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_6v4sc")
}],
"loop": true,
"name": &"walk",
"speed": 3.0
}]

[node name="CockroachShovel" type="CharacterBody2D" groups=["damagable"]]
motion_mode = 1
script = SubResource("GDScript_38a08")
hunt_distance = 300.0
running_speed = 200.0
attack_distance = 60.0
attack_damage = 20.0
max_health = 60.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0.5, 13)
shape = SubResource("RectangleShape2D_2kqfu")

[node name="StateLabel" type="Label" parent="."]
unique_name_in_owner = true
offset_left = -185.0
offset_top = -73.0
offset_right = 185.0
offset_bottom = -50.0
horizontal_alignment = 1

[node name="HealthLabel" type="Label" parent="."]
unique_name_in_owner = true
offset_left = -184.0
offset_top = -46.0
offset_right = 186.0
offset_bottom = -23.0
horizontal_alignment = 1

[node name="AttackCooldownTimer" type="Timer" parent="."]
unique_name_in_owner = true
wait_time = 0.05
one_shot = true

[node name="AnimatedSprite" type="AnimatedSprite2D" parent="."]
unique_name_in_owner = true
position = Vector2(-1, -8)
scale = Vector2(0.3, 0.3)
sprite_frames = SubResource("SpriteFrames_x41un")
animation = &"attack"
frame = 1
frame_progress = 0.394216

[connection signal="timeout" from="AttackCooldownTimer" to="." method="_on_attack_cooldown_timer_timeout"]
